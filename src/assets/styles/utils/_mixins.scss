@use 'sass:math';
@use './variables.scss' as *;
@use './functions.scss' as *;

//--------------------
// SCSS MIXINS
//--------------------

@mixin clearfix() {
	&:after {
		content: '';
		display: table;
		clear: both;
	}
}

@function calculateRem($size) {
	$remSize: math.div($size, 16px);
	@return $remSize * 1rem;
}
@mixin font-size($size) {
	font-size: $size;
	font-size: calculateRem($size);
}

@mixin opacity($opacity) {
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin center-content($wide: false) {
	@if $wide {
		max-width: $container-width;
	} @else {
		max-width: $content-width;
	}
	width: 100%;
	margin-left: auto;
	margin-right: auto;
}

@mixin linkSeparator($separator: '/') {
	&::after {
		content: $separator;
		display: inline-block;
		margin: 0 $space-sm;
		color: var(--grey-dark);
	}

	&:last-of-type::after {
		display: none;
	}
}

@mixin mq($name) {
	$min: breakpoint-min($name, $breakpoints);
	@if $min {
		@media (min-width: $min) {
			@content;
		}
	} @else {
		@content;
	}
}

@mixin mq-down($name) {
	$min: breakpoint-min($name, $breakpoints);
	@if $min {
		@media (max-width: ($min - 1px)) {
			@content;
		}
	} @else {
		@content;
	}
}

@mixin hover-focus {
	&:hover,
	&:focus {
		@content;
	}
}

@mixin sr-only {
	position: absolute;
	width: 1px;
	height: 1px;
	padding: 0;
	overflow: hidden;
	clip: rect(0, 0, 0, 0);
	white-space: nowrap;
	border: 0;
}

@mixin sr-only-focusable {
	&:active,
	&:focus {
		position: static;
		width: auto;
		height: auto;
		overflow: visible;
		clip: auto;
		white-space: normal;
	}
}

@mixin hyphenate() {
	word-wrap: break-word;
	overflow-wrap: break-word;
	hyphens: auto;
}

@mixin coverall() {
	position: absolute;
	top: 0;
	left: 0;
	bottom: 0;
	right: 0;
}

@mixin scrollable() {
	overflow-y: auto;
	-webkit-overflow-scrolling: touch;
}

@mixin button-reset() {
	border: 0;
	padding: 0;
	background-color: transparent;
	-webkit-appearance: none;
}
